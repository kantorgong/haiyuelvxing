<?php
/**
 * MessageController
 * 作者: limj
 * 版本: 17-1-12
 */

namespace api\modules\lovev1\controllers;

use yii\base\Component;

use common\models\xxcb\ChatLog;
use common\models\xxcb\FriendShip;
use components\XyXy;
use common\models\xxcb\LoveTaskRecord;
use common\models\xxcb\LoveUser;

class MessageController extends BaseController
{
    /**
     * @var string 模型类
     */
    public $modelClass = 'common\models\xxcb\ChatLog';

    // 获取聊天记录
    public function actionIndex()
    {
        // 朋友方
        $toUid = intval(\Yii::$app->request->get('toUid'));
        $page = intval(\Yii::$app->request->get('page'));
        // 当前用户
        $uid = $this->userInfo['uid'] ? $this->userInfo['uid'] : intval(\Yii::$app->request->get('uid'));
        $talk_id = \components\helper\CommonUtility::getTalkId($uid, $toUid);
        $chatArr = ChatLog::find()
            ->select('chat_id,content,senderid,msg_type,send_time,is_read')
            ->where(['talk_id'=>$talk_id,'is_del'=>0])
            ->offset($page*20)
            ->limit(20)
            ->orderBy('chat_id DESC')
            ->asArray()
            ->all();
        $message = array();
        $crrentTime = time();
        $nkey = count($chatArr);
        foreach($chatArr as $key=>$value)
        {
            $nkey --;
            $message[$nkey]['msgId'] = $value['chat_id'];
            $message[$nkey]['text'] = $value['content'];
            $message[$nkey]['from'] = $value['senderid'] == $uid ? 'send' : 'received';
            $message[$nkey]['msg_type'] = $value['msg_type'];
            $message[$nkey]['play'] = $value['is_read'] ? true : false;
            $crrentTime - $value['send_time'] > 3600 && $message[$nkey]['date'] = \Yii::$app->formatter->asRelativeTime($value['send_time']);
        }
        ksort($message);
        $site = XyXy::getEnv(true);
        // 获取用户头像
        $listAvater = LoveTaskRecord::find()
            ->select('uid,image')
            ->where(['day'=>2, 'no'=>3])
            ->andWhere(['in', 'uid', [$uid, $toUid]])
            ->asArray()
            ->all();
        $listAvater = array_column($listAvater, 'image', 'uid');
        // 获取用户性别显示头像
        $userInfo = LoveUser::find()
            ->select('uid,sex')
            ->andWhere(['in', 'uid', [$uid, $toUid]])
            ->asArray()
            ->all();
        $userInfo = array_column($userInfo, 'sex', 'uid');
        $avatar = $userInfo[$uid] == '男' ? 'http://s3.xxcb.cn/qitianlianai/images/chat-man.jpg' : 'http://s3.xxcb.cn/qitianlianai/images/chat-girl.jpg';
        $toAvatar = $userInfo[$toUid] == '男' ? 'http://s3.xxcb.cn/qitianlianai/images/chat-man.jpg' : 'http://s3.xxcb.cn/qitianlianai/images/chat-girl.jpg';

        if($listAvater[$toUid])
        {
            $avatar = $listAvater[$toUid];
        }
        if($listAvater[$uid])
        {
            $toAvatar = $listAvater[$uid];
        }
        return $this->show(array('avatar'=>$avatar,
                                 'toAvatar' => $toAvatar,
                                 'timestamp' => $crrentTime,
                                 'list'=>$message));
    }

    public function actionView()
    {
        $toUid = intval(\Yii::$app->request->get('toUid'));
        $timeStamp = intval(\Yii::$app->request->get('timestamp'));
        $chat_id = intval(\Yii::$app->request->get('chat_id')) > 0 ? intval(\Yii::$app->request->get('chat_id')) : 0;
        $uid = $this->userInfo['uid'] ? $this->userInfo['uid'] : intval(\Yii::$app->request->get('uid'));
        $talk_id = \components\helper\CommonUtility::getTalkId($uid, $toUid);
        $time = time();
        $chatArr = ChatLog::find()
            ->select('chat_id,content,senderid,msg_type,send_time,is_read')
            ->where(['talk_id'=>$talk_id,'is_del'=>0, 'senderid'=> $toUid])
            ->andWhere(['>=','send_time', $timeStamp])
            ->andWhere(['>', 'chat_id', $chat_id])
            ->orderBy('chat_id DESC')
//            createCommand()->getRawSql();
            ->asArray()
            ->all();
        $message = array();
        $nkey = count($chatArr);
        if($nkey > 0)
        {
            $chatId= $chatArr[0]['chat_id'];
        }
        foreach($chatArr as $key=>$value)
        {
            $nkey --;
            $message[$nkey]['msgId'] = $value['chat_id'];
            $message[$nkey]['text'] = $value['content'];
            $message[$nkey]['from'] = $value['senderid'] == $uid ? 'send' : 'received';
            $message[$nkey]['msg_type'] = $value['msg_type'];
            $message[$nkey]['play'] = $value['is_read'] ? true : false;
            $time - $value['send_time'] > 3600 && $message[$nkey]['date'] = \Yii::$app->formatter->asRelativeTime($value['send_time']);
        }
        ksort($message);
        return $this->show(array(
            'timestamp' => $time,
            'chatId' => $chatId,
            'list'=>$message));
    }

    /**
     * Renders the index view for the module
     * @return string
     */
    public function actionCreate()
    {
        $params = \Yii::$app->request->getBodyParams();
        if(empty($params['uid']) || empty($params['toUid'])) return false;
        $uid = $params['uid'];
        $fid = $params['toUid'];
        $talk_id = \components\helper\CommonUtility::getTalkId($uid, $fid);
        $friend = FriendShip::find()
            ->where(['talk_id'=>$talk_id])
            ->select('talk_id')
            ->asArray()
            ->one();
        // @todo 暂时不校验好友关系
        //if(empty($friend)) return false;
        $model = new ChatLog();
        $model->senderid = $uid;
        $model->receiverid = $fid;
        $model->send_time = time();
        $model->content = $params['content'];
        $model->msg_type = $params['msgType'];
        $model->talk_id = $talk_id;
        if (!$model->save())
        {
            return $this->show(array(
                'msgId' => 0
            ),'发送失败', -1);
        }
        return $this->show(array(
            'msgId' => $model->getPrimaryKey()
        ));
    }


    /**
     * 修改信息是否读取或删除
     * @return string
     */
    public function actionUpdate()
    {
        $id = \Yii::$app->request->get('id');
        $params = \Yii::$app->request->getBodyParams();

        $chat = new ChatLog();
        $model = $chat->findOne(['chat_id' => $id]);
        $params['is_read'] && $model->is_read = $params['is_read'];
        $params['is_del'] && $model->is_del = $params['is_del'];
        
        if (!$model->save())
        {
            $str = var_export($model->getErrors(), true);
            error_log("<?php \n$str\n----------" . date('Y-m-d H:i:s') . "----------\n?>\n\n", 3, 'minfo.php');
        }
        return true;
    }
} 